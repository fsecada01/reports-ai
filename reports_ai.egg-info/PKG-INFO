Metadata-Version: 2.4
Name: reports_ai
Version: 0.1.0
Summary: A Django module for generating reports from Git history using AI.
Author-email: Francis Secada <francis.secada@gmail.com>
Project-URL: Repository, https://github.com/fsecada01/reports_ai
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: Django>=4.2
Requires-Dist: GitPython>=3.1
Requires-Dist: celery>=5.3
Requires-Dist: django-ai-assistant>=0.1.0
Requires-Dist: python-dotenv>=1.0.0
Provides-Extra: dev
Requires-Dist: black>=23.11; extra == "dev"
Requires-Dist: isort>=5.12; extra == "dev"
Requires-Dist: ruff>=0.1; extra == "dev"
Requires-Dist: jupyterlab>=4.0; extra == "dev"
Requires-Dist: jupyterlab-code-formatter>=2.2; extra == "dev"
Requires-Dist: pre-commit>=3.5; extra == "dev"
Provides-Extra: doc
Requires-Dist: pdoc>=15.0.4; extra == "doc"


# Reports AI - Alpha

**Status: This project is in Alpha. APIs and features may change.**

Reports AI is a Django module that leverages the power of Large Language Models (LLMs) to automatically generate summary reports from your project's Git history. It provides a simple, yet powerful, interface within the Django admin to create, manage, and view these reports.

![Reports AI Screenshot](https://placehold.co/600x400)

## Features

- **Automated Report Generation**: Analyze your Git commit history and generate high-level summaries of development progress.
- **LLM Integration**: Powered by `django-ai-assistant`, it supports a wide range of LLM providers, including OpenAI, Anthropic, and Google.
- **Private Repository Support**: Securely access private GitHub repositories using a personal access token.
- **Django Admin Interface**: Manage and view reports directly from the Django admin.
- **Customizable**: Easily extendable to support different LLM providers and models.

## Installation

1.  **Install the package**:

    ```bash
    pip install -e git+https://github.com/fsecada01/reports_ai.git#egg=reports_ai
    ```

2.  **Add to `INSTALLED_APPS`**:

    In your project's `settings.py`, add `reports_ai` and `django_ai_assistant` to the `INSTALLED_APPS` list:

    ```python
    INSTALLED_APPS = [
        # ...
        'reports_ai',
        'django_ai_assistant',
    ]
    ```

3.  **Run migrations**:

    ```bash
    python manage.py migrate
    ```

## Configuration

1.  **Environment Variables**:

    Create a `.env` file in your project's root directory and add the following variables:

    ```
    # .env
    REPORTS_AI_LLM_PROVIDER=openai
    REPORTS_AI_LLM_API_KEY=your_api_key
    REPORTS_AI_GITHUB_TOKEN=your_github_token
    ```

2.  **`settings.py`**:

    Add the following to your `settings.py` to configure the LLM provider and clone path:

    ```python
    # settings.py
    REPORTS_AI_CLONE_PATH = "git_repos"

    LLM_PROVIDER = os.getenv('REPORTS_AI_LLM_PROVIDER', 'openai')
    LLM_API_KEY = os.getenv('REPORTS_AI_LLM_API_KEY')

    if LLM_PROVIDER == 'openai':
        os.environ['OPENAI_API_KEY'] = LLM_API_KEY
    elif LLM_PROVIDER == 'anthropic':
        os.environ['ANTHROPIC_API_KEY'] = LLM_API_KEY
    elif LLM_PROVIDER == 'google':
        os.environ['GOOGLE_API_KEY'] = LLM_API_KEY
    ```

## Usage

1.  **Navigate to the Django Admin**:

    Go to your Django admin interface and you will see a "Report Instances" section.

2.  **Create a Report Instance**:

    -   Click "Add Report Instance".
    -   Fill in the title and the URL of the Git repository.
    -   Save the instance.

3.  **Generate a Report**:

    -   From the report instance detail view, click the "Generate/Regenerate Report" button.
    -   The report generation will be queued as a background task.
    -   The status of the report will be updated to "Generating" and then "Completed" or "Failed".

4.  **View the Report**:

    -   Once the report is completed, the generated summary will be displayed in the report instance detail view.

## Customization

### Supported LLM Providers

This module supports OpenAI, Anthropic, and Google out of the box. To add a new provider, you need to:

1.  Update the `settings.py` to set the provider-specific API key.
2.  Update `reports_ai/ai_assistants.py` to include the new provider and model.

### Report Generation Prompt

You can customize the prompt used for report generation by modifying the `instructions` in the `ReportAssistant` class in `reports_ai/ai_assistants.py`.
